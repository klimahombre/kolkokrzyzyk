#Resetowanie pliku logów przy starcie gry
open('logi.log', 'w').close()

logging.basicConfig(
    filename='logi.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'



#Logowanie restartu
def restart():
    global board, game_over, player, start_time
    board = [[0 for _ in range(COLS)] for _ in range(ROWS)]
    screen.fill(BG_COLOR)
    draw_lines()
    game_over = False
    player = 1
    start_time = time.time()
    logging.info("Gra została zrestartowana")



#Logowanie ruchów graczy
if board[row][col] == 0:
    board[row][col] = player
    logging.info(f"Gracz {player} wykonał ruch na polu ({row}, {col})")



#Logowanie ruchów AI
if vs_ai and player == 2:
    pygame.time.delay(300)
    ai_moved = ai_move()
    logging.info("Ruch AI")



#Logowanie wygranej
def draw_winner(player):
    text = FONT.render(f"Gracz {player} wygrywa!", True, TEXT_COLOR)
    screen.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT - BOTTOM_PANEL + 25))
    duration = format_time(time.time() - start_time)
    logging.info(f"Gracz {player} wygrał! Czas gry: {duration}")



#Logowanie remisu
def draw_tie():
    text = FONT.render("Remis!", True, TEXT_COLOR)
    screen.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT - BOTTOM_PANEL + 25))
    duration = format_time(time.time() - start_time)
    logging.info(f"Remis! Czas gry: {duration}")



#Logowanie zakończenia gry
if event.type == pygame.QUIT:
    logging.info("Gra zakończona przez użytkownika")
    pygame.quit()
    sys.exit()
