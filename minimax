#Plansza 
board = [[0 for _ in range(COLS)] for _ in range(ROWS)]

vs_ai = False #zmienna globalna

def draw_lines():
    for i in range(1, ROWS):
        pygame.draw.line(screen, LINE_COLOR, (0, i * SQSIZE), (WIDTH, i * SQSIZE), 5)
        pygame.draw.line(screen, LINE_COLOR, (i * SQSIZE, 0), (i * SQSIZE, WIDTH), 5)

# Dodanie funkcji oceniającej planszę która zwraca 10, jeśli AI (gracz 2) wygrywa, -10, jeśli gracz ludzki (gracz 1) wygrywa, 0, jeśli remis lub gra nie jest zakończona

def evaluate(board):
    if check_win(2): # AI (Player 2) wins
        return 10
    elif check_win(1): # Human (Player 1) wins
        return -10
    else:
        return 0

# To jest tak jakby mózg bota. Przegląda wszystkie możliwe ruchy, żeby znaleźć najlepszy dla AI.
# Trochę jakby grał w głowie, zanim zrobi prawdziwy ruch.

def minimax(board, depth, is_max):
    score = evaluate(board)

    if score == 10:
        return score
    if score == -10:
        return score
    if is_board_full():
        return 0

    if is_max:
        best = -sys.maxsize
        for r in range(ROWS):
            for c in range(COLS):
                if board[r][c] == 0:
                    board[r][c] = 2
                    best = max(best, minimax(board, depth + 1, not is_max))
                    board[r][c] = 0
        return best
    else:
        best = sys.maxsize
        for r in range(ROWS):
            for c in range(COLS):
                if board[r][c] == 0:
                    board[r][c] = 1
                    best = min(best, minimax(board, depth + 1, not is_max))
                    board[r][c] = 0
        return best

# To po prostu wybiera ten ruch, który minimax uznał za "najlepszy".
# W sumie, wybiera to, co bot policzył, że mu się najbardziej opłaca.

def find_best_move(board):
    best_val = -sys.maxsize
    best_move = (-1, -1)

    for r in range(ROWS):
        for c in range(COLS):
            if board[r][c] == 0:
                board[r][c] = 2
                move_val = minimax(board, 0, False)
                board[r][c] = 0

                if move_val > best_val:
                    best_move = (r, c)
                    best_val = move_val
    return best_move

# To jest ta funkcja, która faktycznie robi ruch za bota na planszy.
# Wykorzystuje to, co find_best_move jej podpowie.

def ai_move():
    if not is_board_full():
        row, col = find_best_move(board)
        if row != -1 and col != -1:
            board[row][col] = 2
            return check_win(2)
    return False

# Zmieniłem def restart tak, że resetuje grę, ale teraz pamięta, czy graliśmy z botem, czy z kolegą.

def restart():
    global board, game_over, player, vs_ai
    board = [[0 for _ in range(COLS)] for _ in range(ROWS)]
    screen.fill(BG_COLOR)
    draw_lines()
    game_over = False
    player = 1

# Zmiana głównej pętli gry + Logika

global vs_ai 
vs_ai = show_start_screen()
restart()

game_over = False
player = 1

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        if not game_over:
            if event.type == pygame.MOUSEBUTTONDOWN:
                mx, my = event.pos
                if my < WIDTH:
                    row = my // SQSIZE
                    col = mx // SQSIZE
                    if board[row][col] == 0:
                        board[row][col] = player
                        if check_win(player):
                            game_over = True
                        elif is_board_full():
                            game_over = True
                        else:
                            player = 2 if player == 1 else 1
                            if vs_ai and player == 2:
                                pygame.time.delay(300)
                                if ai_move():
                                    game_over = True
                                elif is_board_full():
                                    game_over = True
                                player = 1

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:
                    restart()
                    # vs_ai = show_start_screen()


    screen.fill(BG_COLOR)
    draw_lines()
    draw_figures()

    if game_over:
        if is_board_full() and not check_win(1) and not check_win(2):
            draw_tie()
        else:
            if check_win(1):
                draw_winner(1)
            elif check_win(2):
                draw_winner(2)
            else:
                draw_tie()

    else:
        draw_turn(player)

    pygame.display.update()

